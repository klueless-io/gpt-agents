{
  "name": "rails_generators",
  "title": "Rails Generators",
  "description": "Rails Code Generators",
  "settings": {
    "prompt_path": {
      "value": "/Users/davidcruwys/dev/kgems/ad-agent_architecture/prompts/rails_generators",
      "description": null,
      "title": "Prompt Path"
    },
    "default_llm": {
      "value": "gpt4o",
      "description": null,
      "title": "Default Llm"
    }
  },
  "sections": [
    {
      "name": "DB Layer",
      "title": "Db Layer",
      "order": 1,
      "description": null,
      "steps": [
        {
          "name": "Generate Migration",
          "title": "Generate Migration",
          "order": 1,
          "description": null,
          "prompt": "You will generate code for a rails application, specifically in the area of setting up new models, I will give you a table name, schema and list of what I want you to create.\n\nTable Name: [table_name]\n\nSchema:\n[schema]\n\nCan you create command line calls to generate model, factory and unit test.\nCan you follow rails, rspec or factory_bot best practices when generating code.\n\n---\n\nHere are multiple examples\n\nEXAMPLE 1\n\nTable Name: Workflow\nSchema:\n\n| Field        | Type    | Description                         | Validation               |\n|--------------|---------|-------------------------------------|--------------------------|\n| id           | integer | Primary key, auto-incremented       |                          |\n| name         | string  | The name of the workflow            | Must be present          |\n| description  | string  | A brief description of the workflow |                          |\n\nCommand line calls:\n\nrails generate model Workflow name:string description:string\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Workflow\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Workflow < ApplicationRecord\n  validates :name, presence: true\nend\n\nSample code for factory\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :workflow do\n    name { 'Test Workflow' }\n    description { 'A test workflow' }\n  end\nend\n\n# frozen_string_literal: true\n\nSample unit test\n\n# frozen_string_literal: true\n\nRSpec.describe Workflow, type: :model do\n  # Basic validations using FactoryBot\n  it 'is valid with valid attributes' do\n    workflow = FactoryBot.build(:workflow)\n    expect(workflow).to be_valid\n  end\n\n  it 'is not valid without a name' do\n    workflow = FactoryBot.build(:workflow, name: nil)\n    expect(workflow).not_to be_valid\n  end\nend\n\nEXAMPLE 2\n\nTable Name: sections\n\n| Field       | Type    | Description                            | Requirements                          |\n|-------------|---------|----------------------------------------|---------------------------------------|\n| id          | integer | Primary key, auto-incremented          |                                       |\n| workflow_id | string  | Foreign key referencing workflows      | Must be present                       |\n| name        | string  | The name of the section                | Must be present                       |\n| description | string  | A brief description of the section     |                                       |\n| order       | integer | The order of the section in the workflow| Must be present and a positive integer|\n\nCommand line calls:\n\nrails generate model Section workflow_id:string name:string description:string order:integer\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Section\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Section < ApplicationRecord\n  belongs_to :workflow\n  \n  validates :name, presence: true\n  validates :order, presence: true, numericality: { only_integer: true, greater_than: 0 }\nend\n\nSample code for factory:\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :section do\n    association :workflow\n    name { 'Test Section' }\n    description { 'A test section description' }\n    order { 1 }\n  end\nend\n\nSample unit test:\n\n# frozen_string_literal: true\n\nRSpec.describe Section, type: :model do\n  # Validations\n  it { should validate_presence_of(:name) }\n  it { should validate_presence_of(:order) }\n  it { should validate_numericality_of(:order).only_integer.is_greater_than(0) }\n\n  # Associations\n  it { should belong_to(:workflow) }\n\n  # Factory test\n  it 'has a valid factory' do\n    expect(FactoryBot.build(:section)).to be_valid\n  end\nend\n\nEXAMPLE 3\n\n### Table: prompts\n\n| Field          | Type    | Description                                         | Validation                       |default|\n|----------------|---------|-----------------------------------------------------|----------------------------------|-|\n| id             | integer | Primary key, auto-incremented                       |                                  | |\n| workflow_id    | integer | Foreign key referencing workflows                   |                                  | |\n| name           | string  | The name of the prompt                              | Must be present                  | |\n| path           | string  | A path or reference to where the prompt is stored   |                                  | |\n| content        | text    | The content of the prompt                           |                                  | |\n| description    | string  | A brief description of the promptâ€™s purpose         |                                  | |\n| tags           | enum    | Tags to classify the prompt (e.g., 'primary', 'partial', 'system') | Must be present | 'primary' |\n| metadata       | jsonb   | Metadata associated with the prompt (key-value pairs)|                                  | |\n\nCommand line calls:\n\nrails generate model Prompt workflow:references name:string content:text description:string tags:integer metadata:jsonb\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Prompt\n\nSample migration file:\n\nclass CreatePrompts < ActiveRecord::Migration[7.1]\n  def change\n    create_table :prompts do |t|\n      t.references :workflow, null: false, foreign_key: true\n      t.string :name, null: false\n      t.string :path\n      t.text :content\n      t.string :description\n      t.integer :tags, null: false, default: 0 # Tags as enum, defaulting to 'primary'\n      t.jsonb :metadata\n\n      t.timestamps\n    end\n  end\nend\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Prompt < ApplicationRecord\n  belongs_to :workflow\n\n  enum tags: { primary: 0, partial: 1, system: 2 }, default: :primary\n\n  validates :name, presence: true\n  validates :tags, presence: true\nend\n\nSample code for factory:\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :prompt do\n    association :workflow\n    name { 'Test Prompt' }\n    path { 'path/to/prompt' }\n    content { 'This is a test prompt content.' }\n    description { 'A test prompt description' }\n    tags { :primary }\n    metadata { { example_key: 'example_value' } }\n  end\nend\n\nSample unit test:\n\n# frozen_string_literal: true\n\nRSpec.describe Prompt, type: :model do\n  # Validations\n  it { should validate_presence_of(:name) }\n  it { should validate_presence_of(:tags) }\n\n  # Associations\n  it { should belong_to(:workflow) }\n\n  # Enum\n  it { should define_enum_for(:tags).with_values(%i[primary partial system]) }\n\n  # Factory test\n  it 'has a valid factory' do\n    expect(FactoryBot.build(:prompt)).to be_valid\n  end\nend\n\nGENEAL GUIDELINES and OVERRIDES\n\nMigration Generation Guidelines:\n\nStandard protocol is just to write a `generate model` command\nIf you encounter column type enum then use integer as data type\nIf you see a default field value then give a hint in the form of code of how the migration file should look with comments.\n\n\nModel Generation Guidelines:\n\nIf a field has a default value then we define in the Rails Model.\nIf a field type is enum then add the enum DSL method into the model\nIf a field is boolean and must be present then validates shouild like 'validates :file_name_goes_here, inclusion: { in: [true, false] }'\n\nUnit Test Code Generation Guidelines:\n\nUse Factory Bot to create test data, especially in the model layer, as it keeps setup concise and reusable; prefer this over mocks or doubles.\nPrefer one-liner tests for simple validations or method checks using `is_expected.to` or `expect(subject).to`.\nUse `describe` to group tests by method or class, and `context` to describe different conditions or states within those tests.\nUse test doubles, mocks, and stubs to isolate the unit being tested by replacing dependencies with simplified versions.\nUse `let` for lazy evaluation of test data and `let!` when immediate evaluation is needed to keep test setup efficient.\nUtilize `before` hooks for setting up data or state before each test and `after` hooks for cleanup when necessary.\nWe are also using `shoulda-matchers` to handle basic model validations. **Ensure that you are using `shoulda-matchers` for validating presence, numericality, and associations instead of writing manual validation tests.** This keeps our test suite concise and leverages the full power of `shoulda-matchers` to avoid redundancy.\n`require 'rails_helper'` is redundant, as it is automatically included in our test environment setup.\nWrite a test for enum if a column type is enum\nIf a field is boolean then and must be present then, do not write a validation test as it cannot be trusted\n\n",
          "input_attributes": [
            {
              "name": "table_name",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "Table Name"
            },
            {
              "name": "schema",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "Schema"
            }
          ],
          "output_attributes": [
            {
              "name": "migration",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "Migration"
            }
          ],
          "language_models": [
            "gpt4o"
          ]
        }
      ]
    }
  ],
  "attributes": {
    "table_name": {
      "name": "table_name",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "Table Name"
    },
    "schema": {
      "name": "schema",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "Schema"
    },
    "migration": {
      "name": "migration",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "Migration"
    }
  },
  "prompts": {
    "create_table_migration": {
      "name": "create_table_migration",
      "content": "You will generate code for a rails application, specifically in the area of setting up new models, I will give you a table name, schema and list of what I want you to create.\n\nTable Name: [table_name]\n\nSchema:\n[schema]\n\nCan you create command line calls to generate model, factory and unit test.\nCan you follow rails, rspec or factory_bot best practices when generating code.\n\n---\n\nHere are multiple examples\n\nEXAMPLE 1\n\nTable Name: Workflow\nSchema:\n\n| Field        | Type    | Description                         | Validation               |\n|--------------|---------|-------------------------------------|--------------------------|\n| id           | integer | Primary key, auto-incremented       |                          |\n| name         | string  | The name of the workflow            | Must be present          |\n| description  | string  | A brief description of the workflow |                          |\n\nCommand line calls:\n\nrails generate model Workflow name:string description:string\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Workflow\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Workflow < ApplicationRecord\n  validates :name, presence: true\nend\n\nSample code for factory\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :workflow do\n    name { 'Test Workflow' }\n    description { 'A test workflow' }\n  end\nend\n\n# frozen_string_literal: true\n\nSample unit test\n\n# frozen_string_literal: true\n\nRSpec.describe Workflow, type: :model do\n  # Basic validations using FactoryBot\n  it 'is valid with valid attributes' do\n    workflow = FactoryBot.build(:workflow)\n    expect(workflow).to be_valid\n  end\n\n  it 'is not valid without a name' do\n    workflow = FactoryBot.build(:workflow, name: nil)\n    expect(workflow).not_to be_valid\n  end\nend\n\nEXAMPLE 2\n\nTable Name: sections\n\n| Field       | Type    | Description                            | Requirements                          |\n|-------------|---------|----------------------------------------|---------------------------------------|\n| id          | integer | Primary key, auto-incremented          |                                       |\n| workflow_id | string  | Foreign key referencing workflows      | Must be present                       |\n| name        | string  | The name of the section                | Must be present                       |\n| description | string  | A brief description of the section     |                                       |\n| order       | integer | The order of the section in the workflow| Must be present and a positive integer|\n\nCommand line calls:\n\nrails generate model Section workflow_id:string name:string description:string order:integer\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Section\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Section < ApplicationRecord\n  belongs_to :workflow\n  \n  validates :name, presence: true\n  validates :order, presence: true, numericality: { only_integer: true, greater_than: 0 }\nend\n\nSample code for factory:\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :section do\n    association :workflow\n    name { 'Test Section' }\n    description { 'A test section description' }\n    order { 1 }\n  end\nend\n\nSample unit test:\n\n# frozen_string_literal: true\n\nRSpec.describe Section, type: :model do\n  # Validations\n  it { should validate_presence_of(:name) }\n  it { should validate_presence_of(:order) }\n  it { should validate_numericality_of(:order).only_integer.is_greater_than(0) }\n\n  # Associations\n  it { should belong_to(:workflow) }\n\n  # Factory test\n  it 'has a valid factory' do\n    expect(FactoryBot.build(:section)).to be_valid\n  end\nend\n\nEXAMPLE 3\n\n### Table: prompts\n\n| Field          | Type    | Description                                         | Validation                       |default|\n|----------------|---------|-----------------------------------------------------|----------------------------------|-|\n| id             | integer | Primary key, auto-incremented                       |                                  | |\n| workflow_id    | integer | Foreign key referencing workflows                   |                                  | |\n| name           | string  | The name of the prompt                              | Must be present                  | |\n| path           | string  | A path or reference to where the prompt is stored   |                                  | |\n| content        | text    | The content of the prompt                           |                                  | |\n| description    | string  | A brief description of the promptâ€™s purpose         |                                  | |\n| tags           | enum    | Tags to classify the prompt (e.g., 'primary', 'partial', 'system') | Must be present | 'primary' |\n| metadata       | jsonb   | Metadata associated with the prompt (key-value pairs)|                                  | |\n\nCommand line calls:\n\nrails generate model Prompt workflow:references name:string content:text description:string tags:integer metadata:jsonb\nrake db:migrate && rake db:migrate RAILS_ENV=test\nrails generate rspec:model Prompt\n\nSample migration file:\n\nclass CreatePrompts < ActiveRecord::Migration[7.1]\n  def change\n    create_table :prompts do |t|\n      t.references :workflow, null: false, foreign_key: true\n      t.string :name, null: false\n      t.string :path\n      t.text :content\n      t.string :description\n      t.integer :tags, null: false, default: 0 # Tags as enum, defaulting to 'primary'\n      t.jsonb :metadata\n\n      t.timestamps\n    end\n  end\nend\n\nSample code for model:\n\n# frozen_string_literal: true\n\nclass Prompt < ApplicationRecord\n  belongs_to :workflow\n\n  enum tags: { primary: 0, partial: 1, system: 2 }, default: :primary\n\n  validates :name, presence: true\n  validates :tags, presence: true\nend\n\nSample code for factory:\n\n# frozen_string_literal: true\n\nFactoryBot.define do\n  factory :prompt do\n    association :workflow\n    name { 'Test Prompt' }\n    path { 'path/to/prompt' }\n    content { 'This is a test prompt content.' }\n    description { 'A test prompt description' }\n    tags { :primary }\n    metadata { { example_key: 'example_value' } }\n  end\nend\n\nSample unit test:\n\n# frozen_string_literal: true\n\nRSpec.describe Prompt, type: :model do\n  # Validations\n  it { should validate_presence_of(:name) }\n  it { should validate_presence_of(:tags) }\n\n  # Associations\n  it { should belong_to(:workflow) }\n\n  # Enum\n  it { should define_enum_for(:tags).with_values(%i[primary partial system]) }\n\n  # Factory test\n  it 'has a valid factory' do\n    expect(FactoryBot.build(:prompt)).to be_valid\n  end\nend\n\nGENEAL GUIDELINES and OVERRIDES\n\nMigration Generation Guidelines:\n\nStandard protocol is just to write a `generate model` command\nIf you encounter column type enum then use integer as data type\nIf you see a default field value then give a hint in the form of code of how the migration file should look with comments.\n\n\nModel Generation Guidelines:\n\nIf a field has a default value then we define in the Rails Model.\nIf a field type is enum then add the enum DSL method into the model\nIf a field is boolean and must be present then validates shouild like 'validates :file_name_goes_here, inclusion: { in: [true, false] }'\n\nUnit Test Code Generation Guidelines:\n\nUse Factory Bot to create test data, especially in the model layer, as it keeps setup concise and reusable; prefer this over mocks or doubles.\nPrefer one-liner tests for simple validations or method checks using `is_expected.to` or `expect(subject).to`.\nUse `describe` to group tests by method or class, and `context` to describe different conditions or states within those tests.\nUse test doubles, mocks, and stubs to isolate the unit being tested by replacing dependencies with simplified versions.\nUse `let` for lazy evaluation of test data and `let!` when immediate evaluation is needed to keep test setup efficient.\nUtilize `before` hooks for setting up data or state before each test and `after` hooks for cleanup when necessary.\nWe are also using `shoulda-matchers` to handle basic model validations. **Ensure that you are using `shoulda-matchers` for validating presence, numericality, and associations instead of writing manual validation tests.** This keeps our test suite concise and leverages the full power of `shoulda-matchers` to avoid redundancy.\n`require 'rails_helper'` is redundant, as it is automatically included in our test environment setup.\nWrite a test for enum if a column type is enum\nIf a field is boolean then and must be present then, do not write a validation test as it cannot be trusted\n\n",
      "description": null,
      "title": "Create Table Migration"
    }
  }
}