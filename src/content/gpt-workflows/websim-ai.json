{
  "name": "websim_ai",
  "title": "Websim Ai",
  "description": "Generate user stories, tables, diagrams, and various templates for documentation.",
  "settings": {
    "prompt_path": {
      "value": "/Users/davidcruwys/dev/kgems/ad-agent_architecture/prompts/application_development/websim_ai",
      "description": null,
      "title": "Prompt Path"
    },
    "default_llm": {
      "value": "gpt4o",
      "description": null,
      "title": "Default Llm"
    }
  },
  "sections": [
    {
      "name": "Requirements",
      "title": "Requirements",
      "order": 1,
      "description": null,
      "steps": [
        {
          "name": "Requirement",
          "title": "Requirement",
          "order": 1,
          "description": null,
          "prompt": "Make a fancy looking web app where user can: \n1. input:\n[user_inputs]\n\n2. And clicks submit and loading status is shown.\n\n3. You have acccess to /api/generate endpoint where user input it sent along with a prompt describing what to do with it and what the format should be, take a look at example function below\nThat endpoint will return list of 6 items containg text and image fields in xml format that is parsed and showed to user as a gallery.\nImages are links to pexles image provider along with lat texts that should be added to images when they are shown to user.\nAlt texts should be structured like stable diffusion image prompts ensuring prceise and stylish descriptions of what is in the image.\n\n4. You need to convert user input into [expected_output_description].\nRuminate about best practices to ensure qualitative output that user expects and will be happy about.\n\n5. There is load more button that again shows preloading and loads 6 more items.\n\n6. If JavaScript errors happen during API reqest or when parsing it show raw API response and errors in UI to user so he knows what happened\n\n7. here is example from other app like this of how to call api to get text and images, rewrite and use it to make an app described above:\n        async function generateThumbnailIdeas(content) {\n      const prompt = `Please respond with XML-formatted content. First think and list best practices of designing youtube thumbnails. Put that thinking in tag <practices>...</practices>\n\nThen ruminate which practices fit best this user content and explain that putting it in to tag <thinking>...</thinking>\n\nHere are some ideas:\n### Best Practices for Designing YouTube Thumbnails\n\n- **Use Expressive Faces**: Include close-ups of human faces showing strong emotions (e.g., surprise, joy, curiosity) to\nincrease viewer engagement.\n\n- **Bright, Contrasting Colors**: Opt for vibrant, high-contrast colors that stand out, especially against YouTube's\nneutral background. Bright shades like red, yellow, and orange are highly effective.\n\n- **Text Overlays**: Keep text short (under six words) and bold. Ensure it contrasts well with the background to remain\nlegible on all devices.\n\n- **Consistency in Branding**: Maintain consistent colors, fonts, and design elements across thumbnails to build brand\nrecognition.\n\n- **High-Quality Images**: Use sharp, high-resolution images to maintain a professional appearance; blurry or\nlow-quality visuals deter viewers.\n\n- **Minimalism**: Avoid clutter by focusing on a single subject or emotion, especially in niches where competitors use\noverly busy thumbnails.\n\n- **Intriguing Visuals**: Incorporate eye-catching elements like action shots, large sums of money, or unique objects to\nspark curiosity.\n\nList the most interesting facts from the video transcript that could be used for the thumbnail. Put this list in tag <interesting_facts>...</interesting_facts>\n\nThink out loud, using best YouTube thumbnail design practices, what combinations of phrases and content and style and design should be used for given video so that users click and are not disappointed by content, but stay engaged. Generate at least 6 ideas. Answer with such structured text:\n<ideas>\n<idea>\n<title>title or catchphrase to be used on thumbnail</title>\n<explanation>explanation of the idea and why it would work</explanation>\n<prompt>prompt to use for Flux image generator</prompt>\n</idea>\n</ideas>\n\nEnsure all content is wrapped in a root <response> tag.`;\n      const fullPrompt = `${prompt}\\n\\nVideo content: ${content}`;\n\n      try {\n        const response = await fetch('/api/thumbnail-ideas', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user_input: fullPrompt\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const text = await response.text();\n        console.log('Raw response:', text);\n\n        return parseResponse(text);\n      } catch (error) {\n        console.error('Error:', error);\n        if (retryCount < maxRetries) {\n          retryCount++;\n          console.log(`Retrying... Attempt ${retryCount} of ${maxRetries}`);\n          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n          return generateThumbnailIdeas(content);\n        } else {\n          const errorMessage = `Sorry, I encountered an error while processing your request. Please try again later. Error details: ${error.message}`;\n          showError(errorMessage);\n          retryCount = 0; // Reset retry count after max retries\n          throw error;\n        }\n      }\n    }\n\n    function parseResponse(text) {\n      // First, try to parse as XML\n      try {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(text, \"text/xml\");\n\n        // Check if parsing was successful\n        if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n          throw new Error(\"XML parsing failed\");\n        }\n\n        const practices = xmlDoc.getElementsByTagName(\"practices\")[0]?.textContent || '';\n        const thinking = xmlDoc.getElementsByTagName(\"thinking\")[0]?.textContent || '';\n        const interestingFacts = xmlDoc.getElementsByTagName(\"interesting_facts\")[0]?.textContent || '';\n        const ideaElements = xmlDoc.getElementsByTagName(\"idea\");\n\n        const ideas = Array.from(ideaElements).map(idea => ({\n          title: idea.getElementsByTagName(\"title\")[0]?.textContent || '',\n          explanation: idea.getElementsByTagName(\"explanation\")[0]?.textContent || '',\n          prompt: idea.getElementsByTagName(\"prompt\")[0]?.textContent || ''\n        }));\n\n        return { practices, thinking, interestingFacts, ideas };\n      } catch (xmlError) {\n        console.warn(\"XML parsing failed, attempting JSON parse:\", xmlError);\n        \n        // If XML parsing fails, try JSON parsing\n        try {\n          const jsonResponse = JSON.parse(text);\n          if(jsonResponse.response) {\n            return parseResponse(jsonResponse.response);\n          } else {\n            return {\n              practices: jsonResponse.practices || '',\n              thinking: jsonResponse.thinking || '',\n              interestingFacts: jsonResponse.interesting_facts || '',\n              ideas: jsonResponse.ideas || []\n            };\n          }\n        } catch (jsonError) {\n          console.error(\"Both XML and JSON parsing failed:\", jsonError);\n          throw new Error(\"Unable to parse response\");\n        }\n      }\n    }\n\n    function renderResponse(response) {\n      const { practices, thinking, interestingFacts, ideas } = response;\n      function convertTextToList(text) {\n        // Split the text based on the numbering\n        const listItems = text.split(/\\d+\\.\\s/).filter(item => item.trim() !== '');\n\n        // Create an ordered list element\n        const ol = document.createElement('ol');\n\n        // Iterate over each list item and create <li> elements\n        listItems.forEach(item => {\n          const li = document.createElement('li');\n          li.textContent = item.trim();  // Trim any extra spaces\n          ol.appendChild(li);\n        });\n\n        // Append the <ol> to a container in the HTML\n        return ol;\n      }\n\n      // Render practices\n      if (practices) {\n        const practicesDiv = document.createElement('div');\n        practicesDiv.className = 'practices';\n        practicesDiv.innerHTML = `<h2>Best Practices</h2><p>${convertTextToList(practices).outerHTML}</p>`;\n        result.appendChild(practicesDiv);\n      }\n\n      // Render thinking\n      if (thinking) {\n        const thinkingDiv = document.createElement('div');\n        thinkingDiv.className = 'thinking';\n        thinkingDiv.innerHTML = `<h2>Thumbnail Strategy</h2><p>${thinking}</p>`;\n        result.appendChild(thinkingDiv);\n      }\n\n      // Render interesting facts\n      if (interestingFacts) {\n        const factsDiv = document.createElement('div');\n        factsDiv.className = 'interesting-facts';\n        factsDiv.innerHTML = `<h2>Interesting Facts for Thumbnail</h2><p>${convertTextToList(interestingFacts).outerHTML}</p>`;\n        result.appendChild(factsDiv);\n      }\n\n      // Render ideas gallery\n      const ideasGallery = document.createElement('div');\n      ideasGallery.className = 'ideas-gallery';\n      ideas.forEach(idea => {\n        const ideaElement = createIdeaElement(idea);\n        ideasGallery.appendChild(ideaElement);\n      });\n      result.appendChild(ideasGallery);\n    }\n\n    function createIdeaElement(idea) {\n      const ideaContainer = document.createElement('div');\n      ideaContainer.className = 'idea-container';\n\n      const title = document.createElement('h2');\n      title.className = 'idea-title';\n      title.textContent = idea.title;\n\n      const explanation = document.createElement('p');\n      explanation.className = 'idea-explanation';\n      explanation.textContent = idea.explanation;\n\n      const img = document.createElement('img');\n      img.className = 'idea-image';\n      img.src = `https://source.unsplash.com/random/640x360?${encodeURIComponent(idea.prompt)}`;\n      img.alt = idea.prompt;\n      img.onerror = function() {\n        this.onerror = null;\n        this.src = 'https://via.placeholder.com/640x360?text=Image+Unavailable';\n      };\n\n      const buttonContainer = document.createElement('div');\n      buttonContainer.className = 'button-container';\n\n      const downloadBtn = document.createElement('button');\n      downloadBtn.className = 'download-btn';\n      downloadBtn.textContent = 'Download Image';\n      downloadBtn.addEventListener('click', () => downloadImage(img.src, `thumbnail_${idea.title.replace(/\\s+/g, '_')}.jpg`));\n\n      const copyPromptBtn = document.createElement('button');\n      copyPromptBtn.className = 'copy-prompt-btn';\n      copyPromptBtn.textContent = 'Copy Prompt';\n      copyPromptBtn.addEventListener('click', () => copyToClipboard(idea.prompt));\n\n      buttonContainer.appendChild(downloadBtn);\n      buttonContainer.appendChild(copyPromptBtn);\n\n      ideaContainer.appendChild(title);\n      ideaContainer.appendChild(explanation);\n      ideaContainer.appendChild(img);\n      ideaContainer.appendChild(buttonContainer);\n\n      return ideaContainer;\n    }",
          "input_attributes": [
            {
              "name": "user_inputs",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "User Inputs"
            },
            {
              "name": "expected_output_description",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "Expected Output Description"
            }
          ],
          "output_attributes": [
            {
              "name": "create_app",
              "type": "string",
              "is_array": false,
              "description": null,
              "title": "Create App"
            }
          ],
          "language_models": [
            "gpt4o"
          ]
        }
      ]
    }
  ],
  "attributes": {
    "user_inputs": {
      "name": "user_inputs",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "User Inputs"
    },
    "expected_output_description": {
      "name": "expected_output_description",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "Expected Output Description"
    },
    "create_app": {
      "name": "create_app",
      "type": "string",
      "is_array": false,
      "description": null,
      "title": "Create App"
    }
  },
  "prompts": {
    "create_app_prompt": {
      "name": "create_app_prompt",
      "content": "Make a fancy looking web app where user can: \n1. input:\n[user_inputs]\n\n2. And clicks submit and loading status is shown.\n\n3. You have acccess to /api/generate endpoint where user input it sent along with a prompt describing what to do with it and what the format should be, take a look at example function below\nThat endpoint will return list of 6 items containg text and image fields in xml format that is parsed and showed to user as a gallery.\nImages are links to pexles image provider along with lat texts that should be added to images when they are shown to user.\nAlt texts should be structured like stable diffusion image prompts ensuring prceise and stylish descriptions of what is in the image.\n\n4. You need to convert user input into [expected_output_description].\nRuminate about best practices to ensure qualitative output that user expects and will be happy about.\n\n5. There is load more button that again shows preloading and loads 6 more items.\n\n6. If JavaScript errors happen during API reqest or when parsing it show raw API response and errors in UI to user so he knows what happened\n\n7. here is example from other app like this of how to call api to get text and images, rewrite and use it to make an app described above:\n        async function generateThumbnailIdeas(content) {\n      const prompt = `Please respond with XML-formatted content. First think and list best practices of designing youtube thumbnails. Put that thinking in tag <practices>...</practices>\n\nThen ruminate which practices fit best this user content and explain that putting it in to tag <thinking>...</thinking>\n\nHere are some ideas:\n### Best Practices for Designing YouTube Thumbnails\n\n- **Use Expressive Faces**: Include close-ups of human faces showing strong emotions (e.g., surprise, joy, curiosity) to\nincrease viewer engagement.\n\n- **Bright, Contrasting Colors**: Opt for vibrant, high-contrast colors that stand out, especially against YouTube's\nneutral background. Bright shades like red, yellow, and orange are highly effective.\n\n- **Text Overlays**: Keep text short (under six words) and bold. Ensure it contrasts well with the background to remain\nlegible on all devices.\n\n- **Consistency in Branding**: Maintain consistent colors, fonts, and design elements across thumbnails to build brand\nrecognition.\n\n- **High-Quality Images**: Use sharp, high-resolution images to maintain a professional appearance; blurry or\nlow-quality visuals deter viewers.\n\n- **Minimalism**: Avoid clutter by focusing on a single subject or emotion, especially in niches where competitors use\noverly busy thumbnails.\n\n- **Intriguing Visuals**: Incorporate eye-catching elements like action shots, large sums of money, or unique objects to\nspark curiosity.\n\nList the most interesting facts from the video transcript that could be used for the thumbnail. Put this list in tag <interesting_facts>...</interesting_facts>\n\nThink out loud, using best YouTube thumbnail design practices, what combinations of phrases and content and style and design should be used for given video so that users click and are not disappointed by content, but stay engaged. Generate at least 6 ideas. Answer with such structured text:\n<ideas>\n<idea>\n<title>title or catchphrase to be used on thumbnail</title>\n<explanation>explanation of the idea and why it would work</explanation>\n<prompt>prompt to use for Flux image generator</prompt>\n</idea>\n</ideas>\n\nEnsure all content is wrapped in a root <response> tag.`;\n      const fullPrompt = `${prompt}\\n\\nVideo content: ${content}`;\n\n      try {\n        const response = await fetch('/api/thumbnail-ideas', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user_input: fullPrompt\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const text = await response.text();\n        console.log('Raw response:', text);\n\n        return parseResponse(text);\n      } catch (error) {\n        console.error('Error:', error);\n        if (retryCount < maxRetries) {\n          retryCount++;\n          console.log(`Retrying... Attempt ${retryCount} of ${maxRetries}`);\n          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n          return generateThumbnailIdeas(content);\n        } else {\n          const errorMessage = `Sorry, I encountered an error while processing your request. Please try again later. Error details: ${error.message}`;\n          showError(errorMessage);\n          retryCount = 0; // Reset retry count after max retries\n          throw error;\n        }\n      }\n    }\n\n    function parseResponse(text) {\n      // First, try to parse as XML\n      try {\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(text, \"text/xml\");\n\n        // Check if parsing was successful\n        if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n          throw new Error(\"XML parsing failed\");\n        }\n\n        const practices = xmlDoc.getElementsByTagName(\"practices\")[0]?.textContent || '';\n        const thinking = xmlDoc.getElementsByTagName(\"thinking\")[0]?.textContent || '';\n        const interestingFacts = xmlDoc.getElementsByTagName(\"interesting_facts\")[0]?.textContent || '';\n        const ideaElements = xmlDoc.getElementsByTagName(\"idea\");\n\n        const ideas = Array.from(ideaElements).map(idea => ({\n          title: idea.getElementsByTagName(\"title\")[0]?.textContent || '',\n          explanation: idea.getElementsByTagName(\"explanation\")[0]?.textContent || '',\n          prompt: idea.getElementsByTagName(\"prompt\")[0]?.textContent || ''\n        }));\n\n        return { practices, thinking, interestingFacts, ideas };\n      } catch (xmlError) {\n        console.warn(\"XML parsing failed, attempting JSON parse:\", xmlError);\n        \n        // If XML parsing fails, try JSON parsing\n        try {\n          const jsonResponse = JSON.parse(text);\n          if(jsonResponse.response) {\n            return parseResponse(jsonResponse.response);\n          } else {\n            return {\n              practices: jsonResponse.practices || '',\n              thinking: jsonResponse.thinking || '',\n              interestingFacts: jsonResponse.interesting_facts || '',\n              ideas: jsonResponse.ideas || []\n            };\n          }\n        } catch (jsonError) {\n          console.error(\"Both XML and JSON parsing failed:\", jsonError);\n          throw new Error(\"Unable to parse response\");\n        }\n      }\n    }\n\n    function renderResponse(response) {\n      const { practices, thinking, interestingFacts, ideas } = response;\n      function convertTextToList(text) {\n        // Split the text based on the numbering\n        const listItems = text.split(/\\d+\\.\\s/).filter(item => item.trim() !== '');\n\n        // Create an ordered list element\n        const ol = document.createElement('ol');\n\n        // Iterate over each list item and create <li> elements\n        listItems.forEach(item => {\n          const li = document.createElement('li');\n          li.textContent = item.trim();  // Trim any extra spaces\n          ol.appendChild(li);\n        });\n\n        // Append the <ol> to a container in the HTML\n        return ol;\n      }\n\n      // Render practices\n      if (practices) {\n        const practicesDiv = document.createElement('div');\n        practicesDiv.className = 'practices';\n        practicesDiv.innerHTML = `<h2>Best Practices</h2><p>${convertTextToList(practices).outerHTML}</p>`;\n        result.appendChild(practicesDiv);\n      }\n\n      // Render thinking\n      if (thinking) {\n        const thinkingDiv = document.createElement('div');\n        thinkingDiv.className = 'thinking';\n        thinkingDiv.innerHTML = `<h2>Thumbnail Strategy</h2><p>${thinking}</p>`;\n        result.appendChild(thinkingDiv);\n      }\n\n      // Render interesting facts\n      if (interestingFacts) {\n        const factsDiv = document.createElement('div');\n        factsDiv.className = 'interesting-facts';\n        factsDiv.innerHTML = `<h2>Interesting Facts for Thumbnail</h2><p>${convertTextToList(interestingFacts).outerHTML}</p>`;\n        result.appendChild(factsDiv);\n      }\n\n      // Render ideas gallery\n      const ideasGallery = document.createElement('div');\n      ideasGallery.className = 'ideas-gallery';\n      ideas.forEach(idea => {\n        const ideaElement = createIdeaElement(idea);\n        ideasGallery.appendChild(ideaElement);\n      });\n      result.appendChild(ideasGallery);\n    }\n\n    function createIdeaElement(idea) {\n      const ideaContainer = document.createElement('div');\n      ideaContainer.className = 'idea-container';\n\n      const title = document.createElement('h2');\n      title.className = 'idea-title';\n      title.textContent = idea.title;\n\n      const explanation = document.createElement('p');\n      explanation.className = 'idea-explanation';\n      explanation.textContent = idea.explanation;\n\n      const img = document.createElement('img');\n      img.className = 'idea-image';\n      img.src = `https://source.unsplash.com/random/640x360?${encodeURIComponent(idea.prompt)}`;\n      img.alt = idea.prompt;\n      img.onerror = function() {\n        this.onerror = null;\n        this.src = 'https://via.placeholder.com/640x360?text=Image+Unavailable';\n      };\n\n      const buttonContainer = document.createElement('div');\n      buttonContainer.className = 'button-container';\n\n      const downloadBtn = document.createElement('button');\n      downloadBtn.className = 'download-btn';\n      downloadBtn.textContent = 'Download Image';\n      downloadBtn.addEventListener('click', () => downloadImage(img.src, `thumbnail_${idea.title.replace(/\\s+/g, '_')}.jpg`));\n\n      const copyPromptBtn = document.createElement('button');\n      copyPromptBtn.className = 'copy-prompt-btn';\n      copyPromptBtn.textContent = 'Copy Prompt';\n      copyPromptBtn.addEventListener('click', () => copyToClipboard(idea.prompt));\n\n      buttonContainer.appendChild(downloadBtn);\n      buttonContainer.appendChild(copyPromptBtn);\n\n      ideaContainer.appendChild(title);\n      ideaContainer.appendChild(explanation);\n      ideaContainer.appendChild(img);\n      ideaContainer.appendChild(buttonContainer);\n\n      return ideaContainer;\n    }",
      "description": null,
      "title": "Create App Prompt"
    }
  }
}