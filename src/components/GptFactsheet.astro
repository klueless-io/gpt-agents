---
import BrandCategory from './BrandCategory.astro';
import Bot from './ElBot.astro';
import Command from './ElCommand.astro';
import Panel from './ElPanel.astro';

interface ContentElement {
  class?: string;
  content: string;
}

interface ContentItem {
  type: string;
  content?: string;
  name?: string;
  alias?: string;
  elements?: ContentElement[];
}

interface PanelProps {
  title: string;
  arrow_left: string;
  arrow_top: string;
  panel_height: string;
  label_top: string;
  label_left: string;
  panel_top_offset: string;
  content: ContentItem[];
}

interface GptProps {
  panels: PanelProps[];
  title: string;
}

const gpt = Astro.props.gpt as GptProps;
---

{gpt.panels.map((panel, index) => (
  <Panel
    data-key={index}
    label={panel.title}
    arrow_left={panel.arrow_left}
    arrow_top={panel.arrow_top}
    panel_height={panel.panel_height}
    label_top={panel.label_top}
    label_left={panel.label_left}
    panel_top_offset={panel.panel_top_offset}
  >
    {panel.content.map((contentItem, contentIndex) => {
      if (contentItem.type === 'paragraph') {
        return <p data-key={contentIndex} class='mb-2'>{contentItem.content}</p>;
      } else if (contentItem.type === 'command') {
        return (
          <Command
            data-key={contentIndex}
            name={contentItem.name ?? ''}
            alias={contentItem.alias ?? ''}
          >
            {contentItem.elements && contentItem.elements.map((element, elementIndex) => (
              <span data-key={`element-${elementIndex}`} class={element.class || ''}>{element.content}</span>
            ))}
          </Command>
        );
      }
      // Add more conditions here for other content types if necessary
    })}
  </Panel>
))}

<div class="fixed bottom-[10px] left-[30px]">
  <BrandCategory>
    <span class="brand-text">gpt <highlight>agents</highlight></span>
  </BrandCategory>
</div>
<div class="fixed bottom-[0px] right-[50px]">
  <Bot name={gpt.title} />
</div>
